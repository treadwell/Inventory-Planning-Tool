{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"return",
				"returns_rate"
			],
			[
				"retu",
				"returns_rate"
			],
			[
				"POD",
				"POD_orders"
			],
			[
				"start",
				"start_inv"
			],
			[
				"plot_end",
				"plot_end_inv_2"
			],
			[
				"upper",
				"upper_CI"
			],
			[
				"lower",
				"lower_CI"
			],
			[
				"sd",
				"sd_forecast"
			],
			[
				"per",
				"per_period_cv"
			],
			[
				"seas",
				"seasonCoeffs"
			],
			[
				"trend",
				"trendPerMonth"
			],
			[
				"number",
				"number_months"
			],
			[
				"startin",
				"starting_monthly_demand"
			],
			[
				"statis",
				"statistic_types"
			],
			[
				"latest",
				"latest_date"
			],
			[
				"statistic",
				"statistic_types"
			],
			[
				"in_p",
				"in_process_dollars"
			],
			[
				"split",
				"split_statistic"
			],
			[
				"doll",
				"dollars_per_order"
			],
			[
				"dollar",
				"dollars_per_unit"
			],
			[
				"lines",
				"lines_per_order"
			],
			[
				"units",
				"units_per_line"
			],
			[
				"new_",
				"new_units"
			],
			[
				"current",
				"current_stats"
			],
			[
				"warnin",
				"warnings_1"
			],
			[
				"ship_MA",
				"ship_MA10"
			],
			[
				"in_proc",
				"in_process"
			],
			[
				"curr",
				"current_year-1"
			],
			[
				"curre",
				"current_year"
			],
			[
				"backl",
				"backlog"
			],
			[
				"ship_ma",
				"ship_MA10_dollars"
			],
			[
				"hold",
				"hold_dollars"
			],
			[
				"fut",
				"fut_dollars"
			],
			[
				"unsche",
				"unsched_dollars"
			],
			[
				"week",
				"week_num"
			],
			[
				"weekly",
				"weekly_groups"
			],
			[
				"yt",
				"ytd_2013_new_dollars"
			],
			[
				"cumsu",
				"cumsum_by_week"
			],
			[
				"lates",
				"latest_iso_week"
			],
			[
				"new",
				"new_dollars"
			],
			[
				"plot",
				"plot_dual"
			],
			[
				"stat",
				"statistic2"
			],
			[
				"in_process",
				"in_process_dollars"
			],
			[
				"backlog_do",
				"backlog_dollars"
			],
			[
				"ship_",
				"ship_dollars"
			],
			[
				"pro",
				"props"
			],
			[
				"sched",
				"sched_dollars"
			],
			[
				"statisti",
				"statistic_data"
			],
			[
				"Grov",
				"GROVEPORT"
			],
			[
				"A",
				"ASHLAND"
			],
			[
				"ga",
				"GAHANNA"
			],
			[
				"GAH",
				"GAH_today"
			],
			[
				"GRO",
				"GRO_today"
			],
			[
				"read",
				"read_dir"
			],
			[
				"facility_data",
				"facility_data_db"
			],
			[
				"file",
				"filename"
			],
			[
				"facility",
				"facility_data"
			],
			[
				"n",
				"new"
			],
			[
				"ah",
				"Ashland"
			]
		]
	},
	"buffers":
	[
		{
			"file": "scripts/processing.py",
			"settings":
			{
				"buffer_size": 8430,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Inventory Planning Tool.sublime-project",
			"settings":
			{
				"buffer_size": 73,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test.py",
			"settings":
			{
				"buffer_size": 83,
				"line_ending": "Unix"
			}
		},
		{
			"file": "generate_presentation.py",
			"settings":
			{
				"buffer_size": 12550,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Questions.txt",
			"settings":
			{
				"buffer_size": 151,
				"line_ending": "Unix",
				"name": "Questions"
			}
		},
		{
			"contents": "import matplotlib.pyplot as plt\nimport matplotlib.ticker as tkr\nimport numpy as np\n\n\n# utility functions\n\ndef dot_sum(*args):\n    # element wise sum of list of tuples\n    ans = [0]*len(args[0])\n    for arg in args:\n        for i, point in enumerate(arg):\n            ans[i] += point\n    return tuple(ans)\n\n\ndef plot_forecast(month, forecast):\n    # plot forecast\n    plt.plot(month,forecast, linewidth=2.0, label='demand forecast')\n    plt.ylabel('Units')\n    plt.xlabel('Month')\n\n    plt.title('Forecasted Demand', y=1.05, weight = \"bold\")\n    plt.legend()\n    plt.savefig('./output/' + '01_forecast.png',dpi=300)\n    plt.figure(1)\n\ndef plot_returns(month, forecast, returns):\n    plt.plot(month,forecast, linewidth=2.0, label='demand forecast')\n    plt.plot(month,returns, linewidth=2.0, label='returns forecast')\n    plt.ylabel('Units')\n    plt.xlabel('Month')\n\n    plt.title('Forecasted Demand and Returns', y=1.05, weight = \"bold\")\n    plt.legend()\n    plt.savefig('./output/' + '02_returns.png', dpi=300)\n    plt.figure(2)\n\ndef plot_end_inv(month, end_inv, title, filename):\n    plt.plot(month,end_inv, linewidth=2.0, color = \"g\",label='ending inventory')\n    d = np.array([0]*len(month))\n    plt.fill_between(month, d, end_inv, where=end_inv>=d, interpolate=True, facecolor='green')\n    plt.ylabel('Units')\n    plt.xlabel('Month')\n\n    plt.title(title, y=1.05, weight = \"bold\")\n    plt.legend()\n    plt.savefig('./output/' + filename, dpi=300)\n\n    plt.figure(3)\n\ndef plot_cost_bars(FMC, VMC, POD_VMC, carry_stg_cost):\n\n    N = 4\n    FMC_plot   = (sum(FMC), 0, 0, 0)\n    VMC_plot = (sum(VMC), 0, 0, 0)\n    PODVMC_plot     = (sum(POD_VMC), 0, 0, 0)\n    carry_storage_plot   = (sum(carry_stg_cost), 0, 0, 0)\n    lost_sales_plot = (0, 0, 0, 0)\n               \n    POD_plot = (0,0,0,0)\n               \n    ind = np.arange(N)    # the x locations for the groups\n    width = 0.45       # the width of the bars: can also be len(x) sequence\n\n\n\n    p1 = plt.barh(ind, FMC_plot, width, color='b')\n    p2 = plt.barh(ind, VMC_plot, width, color='g', left=FMC_plot)\n    p3 = plt.barh(ind, PODVMC_plot, width, color = 'r', left = dot_sum(VMC_plot, FMC_plot))\n    p4 = plt.barh(ind, carry_storage_plot, width, color='c', left =\n                 dot_sum(VMC_plot, FMC_plot, PODVMC_plot))\n    p5 = plt.barh(ind, lost_sales_plot, width, color='m',\n                 left = dot_sum(VMC_plot, FMC_plot, PODVMC_plot, carry_storage_plot))\n    p6 = plt.barh(ind, POD_plot, width, color='y',\n                 left = dot_sum(VMC_plot, FMC_plot, PODVMC_plot, carry_storage_plot, lost_sales_plot))\n\n    plt.xlabel('Cost ($)')\n    plt.title('Expected Lifetime Cost', y=1.05, weight = \"bold\")\n    plt.yticks(ind+width/2., ('Plan', '', '', '') )\n\n    lgd = plt.legend( (p1[0], p2[0],p3[0],p4[0], p5[0], p6[0]), \n               ('Fixed Mfg', 'Variable Mfg', 'POD Variable', 'Carry/Storage', 'Lost Sales', \n                'POD Safety'), loc='upper center', bbox_to_anchor=(0.95, 1.05), \n               ncol=1, fancybox=True, shadow=True)\n    plt.grid()\n\n    plt.savefig('./output/' + '04_plan_cost.png', dpi=300, \n            bbox_extra_artists=(lgd,), bbox_inches='tight')\n    plt.figure(4)\n\ndef plot_demand(month, forecast, demand, lower_CI, upper_CI):\n    plt.plot(month,forecast, linewidth=2.0, label='demand forecast')\n    plt.plot(month,demand, linewidth=2.0, label='actual demand')\n    plt.plot(month,upper_CI, linewidth=0.5, label='95% Conf Interval', color=\"blue\")\n    plt.plot(month,lower_CI, linewidth=0.5, color=\"blue\")\n    plt.ylabel('Units')\n    plt.xlabel('Month')\n    plt.title('Demand: Actual vs. Forecast', y=1.05, weight = \"bold\")\n    plt.legend()\n\n    plt.savefig('./output/' + '05_forecast_error.png', dpi=300)\n\n    plt.figure(5)\n\ndef plot_end_inv_posn_act(month, end_inv_posn_act):\n    #print inventory_plot\n\n    ''' combine this into the previous inventory position plot function'''\n\n    plt.plot(month,end_inv_posn_act, linewidth=2.0, \n             label='end inventory position', color='green')\n    d = np.array([0]*len(month))\n    plt.fill_between(month, d, end_inv_posn_act, where=end_inv_posn_act<=d, interpolate=True, facecolor='red')\n    plt.fill_between(month, d, end_inv_posn_act, where=end_inv_posn_act>=d, interpolate=True, facecolor='green')\n    plt.ylabel('Units')\n    plt.xlabel('Month')\n    plt.title('Actual Ending Inventory Position', y=1.05, weight = \"bold\")\n    plt.legend()\n\n    plt.savefig('./output/' + '06_inventory_posn.png', dpi=300)\n    plt.figure(6)\n\ndef plot_cost_bars_2(FMC, VMC, POD_VMC, carry_stg_cost, exp_lost_sales_cost):\n\n    ''' Combine this into the previous plot_cost_bars function'''\n    N = 4\n    FMC_plot   = (sum(FMC), sum(FMC), 0,0)\n    VMC_plot = (sum(VMC), sum(VMC), 0, 0)\n    PODVMC_plot     = (sum(POD_VMC), sum(POD_VMC), 0, 0)\n    carry_storage_plot   = (sum(carry_stg_cost), sum(carry_stg_cost), 0, 0)\n    lost_sales_plot = (0, sum(exp_lost_sales_cost), 0, 0)\n               \n    POD_plot = (0,0,0, 0)\n               \n    ind = np.arange(N)    # the x locations for the groups\n    width = 0.45       # the width of the bars: can also be len(x) sequence\n\n\n\n    p1 = plt.barh(ind, FMC_plot, width, color='b')\n    p2 = plt.barh(ind, VMC_plot, width, color='g', left=FMC_plot)\n    p3 = plt.barh(ind, PODVMC_plot, width, color = 'r', left = dot_sum(VMC_plot, FMC_plot))\n    p4 = plt.barh(ind, carry_storage_plot, width, color='c', left =\n                 dot_sum(VMC_plot, FMC_plot, PODVMC_plot))\n    p5 = plt.barh(ind, lost_sales_plot, width, color='m',\n                 left = dot_sum(VMC_plot, FMC_plot, PODVMC_plot, carry_storage_plot))\n    p6 = plt.barh(ind, POD_plot, width, color='y',\n                 left = dot_sum(VMC_plot, FMC_plot, PODVMC_plot, carry_storage_plot, lost_sales_plot))\n\n    plt.xlabel('Cost ($)')\n\n    plt.title('Expected Lifetime Cost', y=1.05, weight = \"bold\")\n    plt.yticks(ind+width/2., ('Plan', 'Act w\\nLost Sales', '', '') )\n\n    lgd = plt.legend( (p1[0], p2[0],p3[0],p4[0], p5[0], p6[0]), \n               ('Fixed Mfg', 'Variable Mfg', 'POD Variable', 'Carry/Storage', 'Lost Sales', \n                'POD Safety'), loc='upper center', bbox_to_anchor=(0.95, 1.05), ncol=1, fancybox=True, shadow=True)\n    plt.grid()\n\n    plt.savefig('./output/' + '07_lost_sale_cost.png', dpi=300, \n            bbox_extra_artists=(lgd,), bbox_inches='tight')\n    plt.figure(7)\n\n\ndef plot_end_inv_3(month, end_inv_posn_act):\n\n    # this should be the same as the lost sale area chart\n\n    plt.plot(month,end_inv_posn_act, linewidth=2.0, \n             label='end inventory position', color='green')\n    d = np.array([0]*len(month))\n    plt.fill_between(month, d, end_inv_posn_act, where=end_inv_posn_act<=d, interpolate=True, facecolor='blue')\n    plt.fill_between(month, d, end_inv_posn_act, where=end_inv_posn_act>=d, interpolate=True, facecolor='green')\n    plt.ylabel('Units')\n    plt.xlabel('Month')\n    plt.title('Actual Ending Inventory Position', y=1.05, weight = \"bold\")\n    plt.legend()\n\n    plt.savefig('./output/' + '09_POD_posn.png', dpi=300)\n    plt.figure(9)\n\ndef plot_cost_bars_final(FMC, FMC_ss, VMC, VMC_ss, POD_VMC, POD_VMC_ss, carry_stg_cost, carry_stg_cost_ss, exp_lost_sales_cost, exp_lost_sales_cost_ss, lost_sales_as_POD):\n    '''Combine with other bar charts'''\n\n\n    N = 4\n    FMC_plot   = (sum(FMC), sum(FMC), sum(FMC_ss), sum(FMC))\n    VMC_plot = (sum(VMC), sum(VMC), sum(VMC_ss), sum(VMC))\n    PODVMC_plot     = (sum(POD_VMC), sum(POD_VMC), sum(POD_VMC_ss), sum(POD_VMC))\n    carry_storage_plot   = (sum(carry_stg_cost), sum(carry_stg_cost), \n                            sum(carry_stg_cost_ss), sum(carry_stg_cost))\n    lost_sales_plot = (0, sum(exp_lost_sales_cost), sum(exp_lost_sales_cost_ss), 0)\n               \n    POD_plot = (0,0,0, sum(lost_sales_as_POD))\n               \n    ind = np.arange(N)    # the x locations for the groups\n    width = 0.45       # the width of the bars: can also be len(x) sequence\n\n\n\n    p1 = plt.barh(ind, FMC_plot, width, color='b')\n    p2 = plt.barh(ind, VMC_plot, width, color='g', left=FMC_plot)\n    p3 = plt.barh(ind, PODVMC_plot, width, color = 'r', left = dot_sum(VMC_plot, FMC_plot))\n    p4 = plt.barh(ind, carry_storage_plot, width, color='c', left =\n                 dot_sum(VMC_plot, FMC_plot, PODVMC_plot))\n    p5 = plt.barh(ind, lost_sales_plot, width, color='m',\n                 left = dot_sum(VMC_plot, FMC_plot, PODVMC_plot, carry_storage_plot))\n    p6 = plt.barh(ind, POD_plot, width, color='y',\n                 left = dot_sum(VMC_plot, FMC_plot, PODVMC_plot, carry_storage_plot, lost_sales_plot))\n\n    plt.xlabel('Cost ($)')\n\n    plt.title('Expected Lifetime Cost', y=1.05, weight = \"bold\")\n    plt.yticks(ind+width/2., ('Plan', 'Act w\\nLost Sales', 'Act w SS', 'Act w POD') )\n\n    lgd = plt.legend( (p1[0], p2[0],p3[0],p4[0], p5[0], p6[0]), \n               ('Fixed Mfg', 'Variable Mfg', 'POD Variable', 'Carry/Storage', 'Lost Sales', \n                'POD Safety'), loc='upper center', bbox_to_anchor=(1.1, 1.05), \n               ncol=1, fancybox=True, shadow=True)\n    plt.grid()\n\n    plt.savefig('./output/' + '10_final_cost_comparison.png', dpi=300, bbox_extra_artists=(lgd,), bbox_inches='tight')\n    plt.figure(10)\n\n",
			"file": "scripts/output.py",
			"file_size": 9866,
			"file_write_time": 130478539360000000,
			"settings":
			{
				"buffer_size": 9160,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"",
				"Set Syntax: Python"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/kbrooks/Documents/MH/Projects/Inventory Planning Tool/scripts/generate_presentation.py",
		"/Users/kbrooks/Documents/MH/Projects/Inventory Planning Tool/generate_presentation.py",
		"/Users/kbrooks/Documents/MH/Projects/Inventory Planning Tool/__init__.py",
		"/Users/kbrooks/Documents/MH/Projects/Inventory Planning Tool/scripts/processing.py",
		"/Users/kbrooks/Documents/MH/Projects/Inventory Planning Tool/scripts/output.py",
		"/Users/kbrooks/Documents/MH/Projects/Inventory Planning Tool/scripts/__init__.py",
		"/Users/kbrooks/Documents/MH/Projects/Inventory Planning Tool/scripts/Inventory Planning Graphs.ipynb",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2014-03-22 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/execution_wipe_tables.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/run_daily_update.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/run_reports.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/CDC0089 01-01-14.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-06-15 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/test_db/run_daily_update.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/execution_incr_update.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/Ben questions.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/input_files.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/execution_get_backlogs.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/execution_db_utilities.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/db_maintenance.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/processing.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/output_db.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/input_db.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/.__init__.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-06-05 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-06-04 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-06-03 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/output.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/AAA_sched_unsched-20140208-Ben.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-06-01 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-06-26 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-06-13 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-05-10 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-05-11 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-05-15 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-06-10 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-06-08 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-06-07 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-06-06 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/data/2013-06-14 CDC0089.txt",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/AAA_sched_unsched.py",
		"/Users/kbrooks/Documents/UD359 IDS/Project 2/proj2_test_df.csv",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/execution_update_db.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/scripts/hello world.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/Programs/execution_incr_update.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/Programs/process_files.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/Programs/AAA_sched_unsched.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/Programs/dev_incr_update.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/Programs/execution_db_utilities.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/Programs/execution_get_backlogs.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/Programs/execution_update_db.py",
		"/Users/kbrooks/Documents/MH/Projects/Metrics/Distribution/Scheduled Unscheduled (CDC0089-1)/Programs/execution_wipe_tables.py",
		"/Users/kbrooks/Documents/MH/Projects/Process Files/AAA_open_files 2014-02-02.py",
		"/Users/kbrooks/Documents/MH/Projects/Process Files/AAA_open_files.py",
		"/Users/kbrooks/Documents/MH/Projects/Process Files/AAA_open_files_1_25_2014.py",
		"/Users/kbrooks/Documents/MH/Projects/Process Files/import_pdf.py",
		"/Users/kbrooks/Documents/MH/Projects/Process Files/AAA_open_files_orderdict.py",
		"/Users/kbrooks/Documents/MH/Projects/Process Files/Hello World.py",
		"/Users/kbrooks/Documents/IPython Notebooks/AAA_Open_Files_1_12_14_lesson.py",
		"/Users/kbrooks/Documents/IPython Notebooks/inv_planning_graphs_12_22_13.py",
		"/Users/kbrooks/Documents/IPython Notebooks/11_30_13_inventory_planning.py",
		"/Users/kbrooks/Documents/CSA Big Data Education/HW4/BKT-BruteForce/TestData.txt",
		"/Users/kbrooks/Documents/IPython Notebooks/Move Files.ipynb",
		"/Users/kbrooks/Documents/IPython Notebooks/Inventory_planning_10_19_13.py",
		"/Users/kbrooks/Documents/90python/labs/90min.py",
		"/Users/kbrooks/.ipython/profile_default/ipython_notebook_config.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"../output/",
			" \"",
			"calc_expected_lost_sales",
			"calc_costs",
			"expected lost sale",
			"expected lost sales (units)",
			"raise",
			"determine_plan",
			"plt.show",
			"plt.show(1)",
			"dollars",
			"weekday",
			"incr_db_update_1",
			"fac_to_db_1",
			"count_db_records_1",
			"read_file_1",
			"read_dir_1",
			"get_facility_db_1",
			"create_database_1",
			"wipe_tables_1",
			"orders",
			"\"",
			"\",",
			"\"",
			"3,387",
			"\"",
			":",
			"\"lines\":6",
			"new",
			"Facility",
			"def get_facility",
			"  ",
			"   ",
			"    ",
			"       ",
			"facility_data[(facility,date)]",
			"'\\t',",
			" '\\t',",
			"'\\t',",
			"notebook_di"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"./output/",
			" \"\\t",
			"# plt.show",
			"# plt.show(1)",
			"orders",
			"units",
			"lines",
			"incr_db_update",
			"fac_to_db",
			"count_db_records",
			"read_file",
			"read_dir",
			"get_facility_db",
			"create_database",
			"wipe_tables",
			"dollars",
			"units",
			"lines",
			"'",
			"f.",
			",",
			"",
			",",
			"\"lines\":63",
			"\"lines\":62",
			"\"lines\":61",
			"\"lines\":58",
			"\"lines\":55",
			"\"lines\":41",
			"\"lines\":31",
			"hold",
			"fut",
			"old",
			"susp",
			"ship",
			"unsched",
			"sched",
			"Daily_Prodn",
			", ",
			"   ",
			"f",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "scripts/processing.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8430,
						"regions":
						{
						},
						"selection":
						[
							[
								8430,
								8430
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Inventory Planning Tool.sublime-project",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 73,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 83,
						"regions":
						{
						},
						"selection":
						[
							[
								77,
								77
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "generate_presentation.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12550,
						"regions":
						{
						},
						"selection":
						[
							[
								5039,
								5039
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1535.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Questions.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 151,
						"regions":
						{
						},
						"selection":
						[
							[
								151,
								151
							]
						],
						"settings":
						{
							"auto_name": "Questions",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "scripts/output.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9160,
						"regions":
						{
						},
						"selection":
						[
							[
								6334,
								6334
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1597.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 238.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "Inventory Planning Tool.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"",
				"execution_incr_update.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 392.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 246.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
