Questions

Use cases
1. compare various alternatives for a single title to pick the best approach
2. compare various technologies for a single title to determine when to use each
3. compare the best ways to handle titles of different types to see how they should be handled
4. Look at various actual instances of a plan to see what an actual demand pattern (or many demand patterns) might look like

Backlog
1. recalculate ROPs whenever there is a printing <= critical
2. Implement an EOQ function (flag? subclass?)
3. link lead times to printing technologies (?)
4. Implement scenario-group class to capture the plotting
5. Fix the total cost plots for the new costs
6. Implement plots for scenario-groups that can take a larger number of scenarios
7. Implement optimization as a print plan
8. Implement class unit testing with assertions (versus printing everything)

Questions
1. Code review
2. does recalculating demand variance and ROPs with a printing mean my class structure is wrong?
	a. the variance is a function of the purchase plan, but it's currently in demand plan
3. Personal code library?


-------- old ones -----------

1. I don't think my classes are dependent on one another: Title_Demand_Plan should pull on a Title object, not a string "title"
2. The higher level class should have as a property, something generated by the subclass: Demand Plan should have an available
	forecast generated by subclass Title_Demand_Plan that can be used by the other subclass Title_Returns_Plan

--------- old ones ----------
1. How do I get the figures to reset without showing them?
	> Use figure()
	> look into clear function
2. How do I move "generate_presentation.py" to root and import modules correctly?
	> Hacked it
3. What should the class structure look like?
4. Any good way to consolidate functions?
5. Should the plotting be separate from the other class methods, or just pile them all in together?
6. Data structures for plan alternatives?  Should they be classes on their own?

------------------
